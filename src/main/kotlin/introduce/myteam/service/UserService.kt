package introduce.myteam.serviceimport introduce.myteam.dto.UserJoinRequestimport introduce.myteam.dto.UserResponseimport introduce.myteam.repository.UserRepositoryimport jakarta.transaction.Transactionalimport org.springframework.data.repository.findByIdOrNullimport org.springframework.stereotype.Service@Serviceclass UserService(private val userRepository: UserRepository) {    @Transactional    fun save(request: UserJoinRequest) {        userRepository.save(request.toEntity())    }    fun findUser(userId: Long): UserResponse {        val user = userRepository.findByIdOrNull(userId)            ?: throw NoSuchElementException()        return UserResponse.from(user)    }    fun findAll(): List<UserResponse> {        val findAll = userRepository.findAll()        return findAll.map(UserResponse::from)            .toList()    }    @Transactional    fun remove(userId: Long) {        val user = userRepository.findByIdOrNull(userId)            ?: throw NoSuchElementException()        userRepository.delete(user)    }//    fun change(userId: Long, name: String): User {//        val user = userRepository.findByIdOrNull(userId) ?: throw IllegalArgumentException()//        user.changeName(name)//        return user//    }}